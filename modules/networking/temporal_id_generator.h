/*************************************************************************/
/*  temporal_id_generator.h                                              */
/*************************************************************************/
/*                       This file is part of:                           */
/*                           GODOT ENGINE                                */
/*                      https://godotengine.org                          */
/*************************************************************************/
/* Copyright (c) 2007-2020 Juan Linietsky, Ariel Manzur.                 */
/* Copyright (c) 2014-2020 Godot Engine contributors (cf. AUTHORS.md).   */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

#include "core/int_types.h"

//! This ID Generator and ID Receiver are used to generates unique IDs and send
//! them through internet in a compressed form.
//!
//! The compression and decompression algorithm works under the assumptions:
//! - The client, who generates the IDs, does it in a long span of time (60 per second).
//! - The client sends these ids one after the other costantly.
//! - Even with real bad internet connection the IDs arrive with no more than the `threshold` gap.
//!
//! If we send in circle one after the ID that goes from 0 to u16, we can assume
//! that an ID doesn't appear on remote for an amount of time.
//!
//! The receiver, leverage the time factor to decompress the u16 IDs to u64 IDs.

#ifndef TEMPORAL_ID_GENERATOR_H
#define TEMPORAL_ID_GENERATOR_H

typedef uint16_t CompressedId;
typedef uint64_t UncompressedId;

/// Data generated by the generator in the local machine.
struct GeneratedData {
	CompressedId compressed_id;
	UncompressedId id;
};

/// Id generator in the local machine
class TemporalIdGenerator {
	UncompressedId id;

public:
	TemporalIdGenerator();

	/// Returns the next unique ID and its compressed form.
	GeneratedData next();
};

/// Result returned by the `RemoteIdRecptor`.
struct DecompressionResult {
	bool success;
	UncompressedId id;
};

class TemporalIdDecoder {
	CompressedId local_id_head;
	uint64_t generation_count;
	UncompressedId highest_received_id;

public:
	TemporalIdDecoder();

	/// Try to decompress the ID. This may fail because of the mechanism to
	/// prevent take into account too much faraway IDs.
	//
	// Is unlikely that this function fails due to bad internet connection.
	DecompressionResult receive(CompressedId p_local_id);
};

// TODO write a unit test would be awesome!!!!!

#endif
